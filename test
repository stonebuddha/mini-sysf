unit;
lambda x:Int. x;
lambda X. lambda x:X. x;
let x = true in x;
5 + 4;
5 - 2;
5 * 2;
4 / 3;
6 == 3;
6 >? 2;
2 <? 6;
3.2 >=? 7.;
7. <=? 3.2;
unit <> unit;
(lambda x: _:Bool -> Bool. if x false return Bool then true else false) (lambda x: Bool. if x return Bool then false else true);
T = _:Int -> Int;
lambda f: T. lambda x: Int. f (f x);
(lambda X. lambda x: X. x) [All X. _:X -> X];
{true, false};
{true, false}.1;
{true, false}.2;
lambda x: <a : Bool, b : Bool>. x;
List = lambda T. Rec X. <nil : Unit, cons : {T, X}>;
nil = lambda T. fold [List T] <nil = unit> as <nil : Unit, cons : {T, List T}>;
cons = lambda T. lambda h: T. lambda t: List T. fold [List T] <cons = {h, t}> as <nil : Unit, cons : {T, List T}>;
hd = lambda T. lambda t: List T. lambda d: T.
       case unfold [List T] t return T of
         <nil = _> => d
       | <cons = x> => x.1;
tl = lambda T. lambda t: List T.
       case unfold [List T] t return List T of
         <nil = _> => nil [T]
       | <cons = x> => x.2;
Opt = lambda T. <none : Unit, some : T>;
hd_err = lambda T. lambda t: List T.
           case unfold [List T] t return Opt T of
             <nil = _> => <none = unit> as Opt T
           | <cons = x> => <some = x.1> as Opt T;
Nat = { _v : Int | _v >=? 0 };
zero = 0 as Nat;
abs = (lambda n: Int. if n <? 0 return Nat then (0 - n) else n) as n:Int -> Nat;
fac_gen = lambda f: n:Nat -> Nat. lambda n: Nat. if n == 0 return Nat then 1 else n * f (n - 1);
fac = fix fac_gen;
fac 10;